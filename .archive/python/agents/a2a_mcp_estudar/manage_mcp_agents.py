#!/usr/bin/env python3
# Script de gerenciamento para agentes MCP utilit√°rios

import argparse
import asyncio
import json
import logging
import subprocess
import sys
import time
from pathlib import Path

from a2a_mcp_config import A2AMCPConfig


logger = logging.getLogger(__name__)


class MCPAgentManager:
    """Gerenciador para agentes MCP utilit√°rios."""
    
    def __init__(self):
        self.config = A2AMCPConfig()
        self.running_processes = []
    
    def list_available_agents(self):
        """Lista agentes dispon√≠veis para ativa√ß√£o."""
        print("üÜï Agentes MCP Utilit√°rios Dispon√≠veis:")
        print("=" * 50)
        
        for name, config in self.config.NEW_AGENTS.items():
            print(f"\nüìã {name}")
            print(f"   Nome: {config['name']}")
            print(f"   Porta: {config['port']}")
            print(f"   Descri√ß√£o: {config['description']}")
            print(f"   Ferramentas: {', '.join(config['tools'])}")
            
            # Verificar se agent card existe
            card_file = Path(config['card_file'])
            if card_file.exists():
                print(f"   Status: ‚úÖ Agent card existe")
            else:
                print(f"   Status: ‚ùå Agent card n√£o encontrado")
    
    def activate_agent(self, agent_name: str):
        """Ativa um agente espec√≠fico."""
        if agent_name not in self.config.NEW_AGENTS:
            print(f"‚ùå Agente '{agent_name}' n√£o encontrado.")
            print("Agentes dispon√≠veis:")
            for name in self.config.NEW_AGENTS.keys():
                print(f"  - {name}")
            return False
        
        # Ativar na configura√ß√£o
        success = self.config.activate_new_agent(agent_name)
        if success:
            print(f"‚úÖ Agente '{agent_name}' ativado com sucesso!")
            return True
        else:
            print(f"‚ùå Falha ao ativar agente '{agent_name}'")
            return False
    
    def start_agent(self, agent_name: str, host: str = "localhost"):
        """Inicia um agente espec√≠fico."""
        if agent_name not in self.config.NEW_AGENTS:
            print(f"‚ùå Agente '{agent_name}' n√£o encontrado.")
            return None
        
        config = self.config.NEW_AGENTS[agent_name]
        card_file = config['card_file']
        port = config['port']
        
        # Verificar se agent card existe
        if not Path(card_file).exists():
            print(f"‚ùå Agent card n√£o encontrado: {card_file}")
            return None
        
        # Comando para iniciar o agente
        cmd = [
            'python', 'src/a2a_mcp/agents/',
            '--agent-card', card_file,
            '--host', host,
            '--port', str(port)
        ]
        
        print(f"üöÄ Iniciando {config['name']} na porta {port}...")
        print(f"Comando: {' '.join(cmd)}")
        
        try:
            process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            self.running_processes.append((agent_name, process))
            
            # Aguardar um pouco para verificar se iniciou
            time.sleep(2)
            
            if process.poll() is None:
                print(f"‚úÖ {config['name']} iniciado com sucesso!")
                print(f"   URL: http://{host}:{port}")
                return process
            else:
                stdout, stderr = process.communicate()
                print(f"‚ùå Falha ao iniciar {config['name']}")
                print(f"   Erro: {stderr.decode()}")
                return None
                
        except Exception as e:
            print(f"‚ùå Erro ao iniciar agente: {e}")
            return None
    
    def stop_agent(self, agent_name: str):
        """Para um agente espec√≠fico."""
        for name, process in self.running_processes:
            if name == agent_name:
                print(f"üõë Parando {name}...")
                process.terminate()
                process.wait()
                self.running_processes.remove((name, process))
                print(f"‚úÖ {name} parado com sucesso!")
                return True
        
        print(f"‚ùå Agente '{agent_name}' n√£o est√° rodando.")
        return False
    
    def stop_all_agents(self):
        """Para todos os agentes."""
        if not self.running_processes:
            print("‚ÑπÔ∏è  Nenhum agente est√° rodando.")
            return
        
        print("üõë Parando todos os agentes...")
        for name, process in self.running_processes[:]:
            print(f"   Parando {name}...")
            process.terminate()
            process.wait()
            self.running_processes.remove((name, process))
        
        print("‚úÖ Todos os agentes foram parados!")
    
    def status(self):
        """Mostra status dos agentes."""
        print("üìä Status dos Agentes MCP:")
        print("=" * 50)
        
        print(f"üÜï Agentes dispon√≠veis: {len(self.config.NEW_AGENTS)}")
        print(f"üîÑ Agentes rodando: {len(self.running_processes)}")
        
        if self.running_processes:
            print("\nüü¢ Agentes em execu√ß√£o:")
            for name, process in self.running_processes:
                config = self.config.NEW_AGENTS[name]
                print(f"   ‚Ä¢ {config['name']} (porta {config['port']})")
        else:
            print("\n‚ö™ Nenhum agente em execu√ß√£o.")
    
    def test_agent(self, agent_name: str):
        """Testa um agente espec√≠fico."""
        if agent_name not in self.config.NEW_AGENTS:
            print(f"‚ùå Agente '{agent_name}' n√£o encontrado.")
            return False
        
        config = self.config.NEW_AGENTS[agent_name]
        port = config['port']
        
        print(f"üß™ Testando {config['name']}...")
        
        # Teste b√°sico de conex√£o
        try:
            import requests
            response = requests.get(f"http://localhost:{port}/health", timeout=5)
            if response.status_code == 200:
                print(f"‚úÖ {config['name']} est√° respondendo!")
                return True
            else:
                print(f"‚ö†Ô∏è  {config['name']} respondeu com status {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå Erro ao testar {config['name']}: {e}")
            return False
    
    def run_demo(self):
        """Executa uma demonstra√ß√£o dos agentes MCP."""
        print("üéØ Demonstra√ß√£o dos Agentes MCP Utilit√°rios")
        print("=" * 50)
        
        # Exemplo de uso de cada agente
        demos = {
            "text_processor": {
                "description": "Processamento de texto",
                "examples": [
                    "Converta 'hello world' para t√≠tulo",
                    "Valide este JSON: {'name': 'test'}",
                    "Gere um ID √∫nico para sess√£o"
                ]
            },
            "calculator": {
                "description": "C√°lculos matem√°ticos",
                "examples": [
                    "Calcule 15 + 25",
                    "Qual √© 2 elevado a 8?",
                    "Calcule a raiz quadrada de 64"
                ]
            },
            "data_validator": {
                "description": "Valida√ß√£o de dados",
                "examples": [
                    "Valide esta estrutura JSON",
                    "Normalize estes nomes",
                    "Verifique a integridade dos dados"
                ]
            },
            "utility_helper": {
                "description": "Utilit√°rio geral",
                "examples": [
                    "Formate texto e calcule resultado",
                    "Valide JSON e gere ID √∫nico",
                    "Mostre info do sistema"
                ]
            }
        }
        
        for agent_name, demo in demos.items():
            if agent_name in self.config.NEW_AGENTS:
                config = self.config.NEW_AGENTS[agent_name]
                print(f"\nü§ñ {config['name']} (porta {config['port']})")
                print(f"   {demo['description']}")
                print("   Exemplos de uso:")
                for example in demo['examples']:
                    print(f"     ‚Ä¢ {example}")
                print(f"   Ferramentas: {', '.join(config['tools'])}")


def main():
    """Fun√ß√£o principal do gerenciador."""
    parser = argparse.ArgumentParser(description='Gerenciador de Agentes MCP Utilit√°rios')
    parser.add_argument('command', choices=[
        'list', 'activate', 'start', 'stop', 'stop-all', 'status', 'test', 'demo'
    ], help='Comando a executar')
    parser.add_argument('--agent', help='Nome do agente')
    parser.add_argument('--host', default='localhost', help='Host para iniciar agentes')
    
    args = parser.parse_args()
    
    manager = MCPAgentManager()
    
    try:
        if args.command == 'list':
            manager.list_available_agents()
        
        elif args.command == 'activate':
            if not args.agent:
                print("‚ùå --agent √© obrigat√≥rio para ativar")
                sys.exit(1)
            manager.activate_agent(args.agent)
        
        elif args.command == 'start':
            if not args.agent:
                print("‚ùå --agent √© obrigat√≥rio para iniciar")
                sys.exit(1)
            manager.start_agent(args.agent, args.host)
        
        elif args.command == 'stop':
            if not args.agent:
                print("‚ùå --agent √© obrigat√≥rio para parar")
                sys.exit(1)
            manager.stop_agent(args.agent)
        
        elif args.command == 'stop-all':
            manager.stop_all_agents()
        
        elif args.command == 'status':
            manager.status()
        
        elif args.command == 'test':
            if not args.agent:
                print("‚ùå --agent √© obrigat√≥rio para testar")
                sys.exit(1)
            manager.test_agent(args.agent)
        
        elif args.command == 'demo':
            manager.run_demo()
    
    except KeyboardInterrupt:
        print("\nüõë Opera√ß√£o interrompida pelo usu√°rio")
        manager.stop_all_agents()
        sys.exit(0)
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        sys.exit(1)


if __name__ == '__main__':
    main() 